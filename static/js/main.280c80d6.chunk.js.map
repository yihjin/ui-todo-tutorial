{"version":3,"sources":["context/todo.reducer.js","context/todo.actions.js","context/TodoContextProvider.jsx","components/Header.jsx","components/TodoInput.jsx","components/TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["todoReducer","state","action","type","data","todos","id","description","initialState","TodoContext","createContext","TodoContextProvider","children","useReducer","dispatch","Provider","value","Header","data-cy","TodoInput","useState","inputValue","setInputValue","useContext","className","onChange","target","placeholder","size","shape","onClick","uuidv4","addTodo","TodoTask","props","delete","TodoList","handleDeleteTodo","Object","entries","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAEaA,EAAc,SAACC,EAAOC,GAAY,IACrCC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KACd,OAAQD,GACN,ICLqB,YDMnB,OAAO,2BAAKF,GAAZ,IAAmBI,MAAOD,IAC5B,ICNoB,WDOlB,IAAMC,EAAK,2BACNJ,EAAMI,OADA,kBAERD,EAAKE,GAAK,CAAEC,YAAaH,EAAKG,eAEjC,OAAO,2BAAKN,GAAZ,IAAmBI,UACrB,QACE,OAAOJ,IEXPO,EAAe,CAAEH,MAAO,IACjBI,EAAcC,wBAAcF,GAE5BG,EAAsB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACzBC,qBAAWb,EAAaQ,GADC,mBAC5CP,EAD4C,KACrCa,EADqC,KAEnD,OACE,kBAACL,EAAYM,SAAb,CAAsBC,MAAO,CAAEf,QAAOa,aACnCF,ICRMK,EAAS,kBAAM,wBAAIC,UAAQ,UAAZ,S,wBCIfC,EAAY,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACtBC,EADsB,KACVC,EADU,KAErBR,EAAaS,qBAAWd,GAAxBK,SASR,OACE,yBAAKU,UAAU,cACb,kBAAC,IAAD,CACER,MAAOK,EACPI,SAAU,gBAAaT,EAAb,EAAGU,OAAUV,MAAb,OAA2BM,EAAcN,IACnDW,YAAY,aACZC,KAAK,QACLJ,UAAU,oBACVN,UAAQ,sBAEV,kBAAC,IAAD,CACEf,KAAK,UACL0B,MAAM,QACNC,QApBiB,WACrB,IAAMxB,EAAKyB,cAEXjB,EHTmB,SAACR,EAAIC,GAAL,MAAsB,CAC3CJ,KAJsB,WAKtBC,KAAM,CAAEE,KAAIC,gBGODyB,CAAQ1B,EAAIe,IACrBC,EAAc,KAiBVE,UAAU,qBACVN,UAAQ,sBALV,SCvBAe,EAAW,SAACC,GAChB,OACE,yBAAKV,UAAU,aACb,yBAAKA,UAAU,kBAAkBN,UAAQ,mBACtCgB,EAAM3B,aAET,kBAAC,IAAD,CACEJ,KAAK,UACL0B,MAAM,QACNL,UAAU,oBACVN,UAAQ,2BACRY,QAAS,cALX,UASA,kBAAC,IAAD,CACE3B,KAAK,UACL0B,MAAM,QACNL,UAAU,oBACVN,UAAQ,2BACRY,QAAS,kBAAMI,EAAMC,OAAOD,EAAM5B,MALpC,YAaO8B,EAAW,WAAO,IACrBnC,EAAUsB,qBAAWd,GAArBR,MAWFoC,EAAmB,SAAC/B,KAI1B,OACE,yBAAKkB,UAAU,YAAYN,UAAQ,aAChCoB,OAAOC,QAAQtC,EAAMI,OAAOmC,KAAI,mCAAElC,EAAF,KAAMmC,EAAN,YAC/B,kBAAC,EAAD,CACEC,IAAKpC,EACLC,YAAakC,EAAKlC,YAClB4B,OAAQE,EACR/B,GAAIA,SCpCCqC,EAZH,WACV,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDYoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.280c80d6.chunk.js","sourcesContent":["import { SET_TODOS, ADD_TODO } from \"./todo.actions\";\n\nexport const todoReducer = (state, action) => {\n  const { type, data } = action;\n  switch (type) {\n    case SET_TODOS:\n      return { ...state, todos: data };\n    case ADD_TODO:\n      const todos = {\n        ...state.todos,\n        [data.id]: { description: data.description },\n      };\n      return { ...state, todos };\n    default:\n      return state;\n  }\n};\n","export const SET_TODOS = \"SET_TODOS\";\nexport const ADD_TODO = \"ADD_TODO\";\n\nexport const setTodos = (todos) => ({ type: SET_TODOS, data: todos });\nexport const addTodo = (id, description) => ({\n  type: ADD_TODO,\n  data: { id, description },\n});\n","import React, { createContext, useReducer } from \"react\";\nimport { todoReducer } from \"./todo.reducer\";\n\nconst initialState = { todos: {} };\nexport const TodoContext = createContext(initialState);\n\nexport const TodoContextProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(todoReducer, initialState);\n  return (\n    <TodoContext.Provider value={{ state, dispatch }}>\n      {children}\n    </TodoContext.Provider>\n  );\n};\n","import React from \"react\";\n\nexport const Header = () => <h1 data-cy=\"header\">TODO</h1>;\n","import { Button, Input } from \"antd\";\nimport React, { useContext, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { addTodo } from \"../context/todo.actions\";\nimport { TodoContext } from \"../context/TodoContextProvider\";\n\nexport const TodoInput = () => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const { dispatch } = useContext(TodoContext);\n\n  const handleAddClick = () => {\n    const id = uuidv4();\n\n    dispatch(addTodo(id, inputValue));\n    setInputValue(\"\");\n  }\n\n  return (\n    <div className=\"todo-input\">\n      <Input\n        value={inputValue}\n        onChange={({ target: { value } }) => setInputValue(value)}\n        placeholder=\"Add a TODO\"\n        size=\"large\"\n        className=\"todo-input__input\"\n        data-cy=\"todo-input__input\"\n      />\n      <Button\n        type=\"primary\"\n        shape=\"round\"\n        onClick={handleAddClick}\n        className=\"todo-input__button\"\n        data-cy=\"todo-input__button\"\n      >\n        Add\n      </Button>\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Button } from \"antd\";\nimport { TodoContext } from \"../context/TodoContextProvider\";\n\nconst TodoTask = (props) => {\n  return (\n    <div className=\"todo-task\">\n      <div className=\"todo-task__name\" data-cy=\"todo-task__name\">\n        {props.description}\n      </div>\n      <Button\n        type=\"primary\"\n        shape=\"round\"\n        className=\"todo-task__button\"\n        data-cy=\"todo-task__button-update\"\n        onClick={() => {}}\n      >\n        Update\n      </Button>\n      <Button\n        type=\"primary\"\n        shape=\"round\"\n        className=\"todo-task__button\"\n        data-cy=\"todo-task__button-delete\"\n        onClick={() => props.delete(props.id)}\n      >\n        Delete\n      </Button>\n    </div>\n  );\n};\n\nexport const TodoList = () => {\n  const { state } = useContext(TodoContext);\n\n  // useEffect(() => {\n  //   const fetchTodos = async () => {\n  //     const todos = await firebaseApi.fetchTodos();\n  //     dispatch(setTodos(todos));\n  //   }\n\n  //   fetchTodos();\n  // }, [dispatch]);\n\n  const handleDeleteTodo = (id) => {\n    // TODO: fill in\n  };\n\n  return (\n    <div className=\"todo-list\" data-cy=\"todo-list\">\n      {Object.entries(state.todos).map(([id, todo]) => (\n        <TodoTask\n          key={id}\n          description={todo.description}\n          delete={handleDeleteTodo}\n          id={id}\n        />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { TodoContextProvider } from \"./context/TodoContextProvider\";\nimport { Header } from \"./components/Header\";\nimport { TodoInput } from \"./components/TodoInput\";\nimport { TodoList } from \"./components/TodoList\";\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Header />\n      <TodoContextProvider>\n        <TodoInput />\n        <TodoList />\n      </TodoContextProvider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import './config/firebaseConfig';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}